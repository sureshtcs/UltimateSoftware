From 53cf2a313689462c42a0757ed183004f52b451d3 Mon Sep 17 00:00:00 2001
From: JoshuaPa <josh_paulin@ultimatesoftware.com>
Date: Tue, 17 Sep 2019 09:21:00 -0400
Subject: [PATCH] Add grading

---
 .../school/domain/person/Student.java         | 31 ++++++++++
 .../school/domain/subject/StudentSubject.java | 25 +++++++-
 .../school/domain/subject/Subject.java        |  9 +++
 .../school/domain/subject/SubjectService.java | 12 +++-
 .../school/rest/person/SetGradeDto.java       | 23 +++++++
 .../school/rest/person/StudentController.java | 48 +++++++++++++++
 .../school/rest/person/StudentDtoMapper.java  |  7 +++
 .../school/rest/person/StudentInfoDto.java    | 32 ++++++++++
 .../school/rest/subject/GradesDto.java        | 23 +++++++
 .../rest/subject/SubjectController.java       | 54 +++++++++++++++-
 .../school/rest/subject/SubjectDtoMapper.java |  2 +-
 .../rest/person/StudentControllerTests.java   | 61 +++++++++++++++++++
 .../rest/subject/SubjectControllerTests.java  | 41 ++++++++++++-
 13 files changed, 359 insertions(+), 9 deletions(-)
 create mode 100644 src/main/java/com/ultimatesoftware/school/rest/person/SetGradeDto.java
 create mode 100644 src/main/java/com/ultimatesoftware/school/rest/person/StudentInfoDto.java
 create mode 100644 src/main/java/com/ultimatesoftware/school/rest/subject/GradesDto.java

diff --git a/src/main/java/com/ultimatesoftware/school/domain/person/Student.java b/src/main/java/com/ultimatesoftware/school/domain/person/Student.java
index 64395fe..e2c955e 100644
--- a/src/main/java/com/ultimatesoftware/school/domain/person/Student.java
+++ b/src/main/java/com/ultimatesoftware/school/domain/person/Student.java
@@ -2,6 +2,7 @@ package com.ultimatesoftware.school.domain.person;
 
 import java.util.HashSet;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
 import javax.persistence.CascadeType;
@@ -60,6 +61,36 @@ public class Student {
 		this.subjects = subjects.stream().map(subject -> new StudentSubject(this, subject)).collect(Collectors.toSet());
 	}
 
+	public Double getOriginalGrade(Subject subject) {
+		Optional<StudentSubject> studentSubject = this.subjects.stream()
+				.filter(s -> s.equals(subject))
+				.findFirst();
+
+		return studentSubject.get().getOriginalGrade();
+	}
+
+	public void setOriginalGrade(Double grade, Subject subject) {
+		this.subjects.stream()
+				.filter(s -> s.getSubject().equals(subject))
+				.findFirst()
+				.ifPresent(s -> s.setOriginalGrade(grade));
+	}
+
+	public Double getAdjustedGrade(Subject subject) {
+		Optional<StudentSubject> studentSubject = this.subjects.stream()
+				.filter(s -> s.equals(subject))
+				.findFirst();
+
+		return studentSubject.get().getAdjustedGrade();
+	}
+
+	public void setAdjustedGrade(Double grade, Subject subject) {
+		this.subjects.stream()
+				.filter(s -> s.getSubject().equals(subject))
+				.findFirst()
+				.ifPresent(s -> s.setAdjustedGrade(grade));
+	}
+
 	@Override
 	public boolean equals(Object o) {
 		if (this == o) {
diff --git a/src/main/java/com/ultimatesoftware/school/domain/subject/StudentSubject.java b/src/main/java/com/ultimatesoftware/school/domain/subject/StudentSubject.java
index 869ecd0..be86e90 100644
--- a/src/main/java/com/ultimatesoftware/school/domain/subject/StudentSubject.java
+++ b/src/main/java/com/ultimatesoftware/school/domain/subject/StudentSubject.java
@@ -26,6 +26,10 @@ public class StudentSubject {
 	@JoinColumn(name = "subject_id", nullable = false, updatable = false)
 	private Subject subject;
 
+	private Double originalGrade;
+
+	private Double adjustedGrade;
+
 	protected StudentSubject() {
 		super();
 	}
@@ -55,6 +59,22 @@ public class StudentSubject {
 		this.subject = subject;
 	}
 
+	public Double getOriginalGrade() {
+		return originalGrade;
+	}
+
+	public void setOriginalGrade(Double originalGrade) {
+		this.originalGrade = originalGrade;
+	}
+
+	public Double getAdjustedGrade() {
+		return adjustedGrade;
+	}
+
+	public void setAdjustedGrade(Double adjustedGrade) {
+		this.adjustedGrade = adjustedGrade;
+	}
+
 	@Override
 	public boolean equals(Object o) {
 		if (this == o) {
@@ -65,11 +85,12 @@ public class StudentSubject {
 		}
 		StudentSubject that = (StudentSubject) o;
 		return Objects.equals(getId(), that.getId()) && getStudent().equals(that.getStudent()) && getSubject().equals(
-				that.getSubject());
+				that.getSubject()) && getOriginalGrade().equals(that.getOriginalGrade()) && getAdjustedGrade().equals(
+				that.getAdjustedGrade());
 	}
 
 	@Override
 	public int hashCode() {
-		return Objects.hash(getId(), getStudent(), getSubject());
+		return Objects.hash(getId(), getStudent(), getSubject(), getOriginalGrade(), getAdjustedGrade());
 	}
 }
diff --git a/src/main/java/com/ultimatesoftware/school/domain/subject/Subject.java b/src/main/java/com/ultimatesoftware/school/domain/subject/Subject.java
index b177390..d064bd1 100644
--- a/src/main/java/com/ultimatesoftware/school/domain/subject/Subject.java
+++ b/src/main/java/com/ultimatesoftware/school/domain/subject/Subject.java
@@ -1,6 +1,7 @@
 package com.ultimatesoftware.school.domain.subject;
 
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -52,6 +53,14 @@ public class Subject {
 		this.students = students.stream().map(s -> new StudentSubject(s, this)).collect(Collectors.toSet());
 	}
 
+	public Map<Student, Double> getOriginalGrades() {
+		return students.stream().collect(Collectors.toMap(StudentSubject::getStudent, StudentSubject::getOriginalGrade));
+	}
+
+	public Map<Student, Double> getAdjustedGrades() {
+		return students.stream().collect(Collectors.toMap(StudentSubject::getStudent,	StudentSubject::getAdjustedGrade));
+	}
+
 	@Override
 	public boolean equals(Object o) {
 		if (this == o) {
diff --git a/src/main/java/com/ultimatesoftware/school/domain/subject/SubjectService.java b/src/main/java/com/ultimatesoftware/school/domain/subject/SubjectService.java
index 1bae47d..d0c53d3 100644
--- a/src/main/java/com/ultimatesoftware/school/domain/subject/SubjectService.java
+++ b/src/main/java/com/ultimatesoftware/school/domain/subject/SubjectService.java
@@ -36,5 +36,15 @@ public class SubjectService {
 	public void delete(Long id) {
 		subjectRepository.deleteById(id);
 	}
-	
+
+	@Transactional
+	public Double getAverage(Subject subject) {
+		return subject.getOriginalGrades().values().stream().mapToDouble(Double::doubleValue).average().getAsDouble();
+	}
+
+	@Transactional(readOnly = true)
+	public Double adjustGrade(Double originalGrade, Double adjustmentFactor) {
+		return Math.pow(100, 1-adjustmentFactor) * Math.pow(originalGrade, adjustmentFactor);
+	}
+
 }
diff --git a/src/main/java/com/ultimatesoftware/school/rest/person/SetGradeDto.java b/src/main/java/com/ultimatesoftware/school/rest/person/SetGradeDto.java
new file mode 100644
index 0000000..41c9728
--- /dev/null
+++ b/src/main/java/com/ultimatesoftware/school/rest/person/SetGradeDto.java
@@ -0,0 +1,23 @@
+package com.ultimatesoftware.school.rest.person;
+
+public class SetGradeDto {
+
+	private Long subjectId;
+	private Double grade;
+
+	public Long getSubjectId() {
+		return subjectId;
+	}
+
+	public void setSubjectId(Long subjectId) {
+		this.subjectId = subjectId;
+	}
+
+	public Double getGrade() {
+		return grade;
+	}
+
+	public void setGrade(Double grade) {
+		this.grade = grade;
+	}
+}
diff --git a/src/main/java/com/ultimatesoftware/school/rest/person/StudentController.java b/src/main/java/com/ultimatesoftware/school/rest/person/StudentController.java
index 0006ce8..ff25d64 100644
--- a/src/main/java/com/ultimatesoftware/school/rest/person/StudentController.java
+++ b/src/main/java/com/ultimatesoftware/school/rest/person/StudentController.java
@@ -14,6 +14,7 @@ import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.server.ResponseStatusException;
 import com.ultimatesoftware.school.domain.person.Student;
@@ -86,4 +87,51 @@ public class StudentController {
 	public void delete(@PathVariable Long id) {
 		studentService.delete(id);
 	}
+
+	@GetMapping("/{studentId}/getOriginalGrade")
+	public Double getOriginalGrade(@PathVariable Long studentId, @RequestParam Long subjectId) {
+		Optional<Student> student = studentService.getStudent(studentId);
+		if (!student.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found");
+		}
+
+		Optional<Subject> subject = subjectService.getSubject(subjectId);
+		if (!subject.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found");
+		}
+
+		return student.get().getOriginalGrade(subject.get());
+	}
+
+	@GetMapping("/{studentId}/getAdjustedGrade")
+	public Double getAdjustedGrade(@PathVariable Long studentId, @RequestParam Long subjectId) {
+		Optional<Student> student = studentService.getStudent(studentId);
+		if (!student.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found");
+		}
+
+		Optional<Subject> subject = subjectService.getSubject(studentId);
+		if (!subject.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found");
+		}
+
+		return student.get().getAdjustedGrade(subject.get());
+	}
+
+	@PutMapping("/{studentId}/setOriginalGrade")
+	public StudentDto setOriginalGrade(@PathVariable Long studentId, @RequestBody SetGradeDto setGradeDto) {
+		Optional<Student> student = studentService.getStudent(studentId);
+		if (!student.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found");
+		}
+
+		Optional<Subject> subject = subjectService.getSubject(setGradeDto.getSubjectId());
+		if (!subject.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found");
+		}
+
+		student.get().setOriginalGrade(setGradeDto.getGrade(), subject.get());
+		studentService.save(student.get());
+		return studentDtoMapper.mapToDto(student.get());
+	}
 }
diff --git a/src/main/java/com/ultimatesoftware/school/rest/person/StudentDtoMapper.java b/src/main/java/com/ultimatesoftware/school/rest/person/StudentDtoMapper.java
index d32b372..cf4c294 100644
--- a/src/main/java/com/ultimatesoftware/school/rest/person/StudentDtoMapper.java
+++ b/src/main/java/com/ultimatesoftware/school/rest/person/StudentDtoMapper.java
@@ -16,6 +16,13 @@ public class StudentDtoMapper {
 		this.subjectDtoMapper = subjectDtoMapper;
 	}
 
+	public StudentInfoDto mapToInfoDto(Student domain) {
+		StudentInfoDto dto = new StudentInfoDto();
+		dto.setFirstName(domain.getFirstName());
+		dto.setLastName(domain.getFirstName());
+		return dto;
+	}
+
 	public StudentDto mapToDto(Student domain) {
 		StudentDto dto = new StudentDto();
 		dto.setId(domain.getId());
diff --git a/src/main/java/com/ultimatesoftware/school/rest/person/StudentInfoDto.java b/src/main/java/com/ultimatesoftware/school/rest/person/StudentInfoDto.java
new file mode 100644
index 0000000..49fca05
--- /dev/null
+++ b/src/main/java/com/ultimatesoftware/school/rest/person/StudentInfoDto.java
@@ -0,0 +1,32 @@
+package com.ultimatesoftware.school.rest.person;
+
+public class StudentInfoDto {
+
+	private Long id;
+	private String lastName;
+	private String firstName;
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public String getLastName() {
+		return lastName;
+	}
+
+	public void setLastName(String lastName) {
+		this.lastName = lastName;
+	}
+
+	public String getFirstName() {
+		return firstName;
+	}
+
+	public void setFirstName(String firstName) {
+		this.firstName = firstName;
+	}
+}
diff --git a/src/main/java/com/ultimatesoftware/school/rest/subject/GradesDto.java b/src/main/java/com/ultimatesoftware/school/rest/subject/GradesDto.java
new file mode 100644
index 0000000..3f99d5f
--- /dev/null
+++ b/src/main/java/com/ultimatesoftware/school/rest/subject/GradesDto.java
@@ -0,0 +1,23 @@
+package com.ultimatesoftware.school.rest.subject;
+
+public class GradesDto {
+
+	private Double originalGrade;
+	private Double adjustedGrade;
+
+	public Double getOriginalGrade() {
+		return originalGrade;
+	}
+
+	public void setOriginalGrade(Double originalGrade) {
+		this.originalGrade = originalGrade;
+	}
+
+	public Double getAdjustedGrade() {
+		return adjustedGrade;
+	}
+
+	public void setAdjustedGrade(Double adjustedGrade) {
+		this.adjustedGrade = adjustedGrade;
+	}
+}
diff --git a/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectController.java b/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectController.java
index d43e261..fb8ee7f 100644
--- a/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectController.java
+++ b/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectController.java
@@ -1,7 +1,9 @@
 package com.ultimatesoftware.school.rest.subject;
 
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -14,12 +16,14 @@ import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.server.ResponseStatusException;
 import com.ultimatesoftware.school.domain.person.Student;
-import com.ultimatesoftware.school.domain.subject.SubjectService;
 import com.ultimatesoftware.school.domain.person.StudentService;
 import com.ultimatesoftware.school.domain.subject.Subject;
+import com.ultimatesoftware.school.domain.subject.SubjectService;
+import com.ultimatesoftware.school.rest.person.StudentDtoMapper;
 
 @RestController
 @RequestMapping("/v1/subjects")
@@ -28,14 +32,15 @@ public class SubjectController {
 	private final StudentService studentService;
 	private final SubjectService subjectService;
 	private final SubjectDtoMapper subjectDtoMapper;
-
+	private final StudentDtoMapper studentDtoMapper;
 
 	@Autowired
 	public SubjectController(StudentService studentService, SubjectService subjectService,
-			SubjectDtoMapper subjectDtoMapper) {
+			SubjectDtoMapper subjectDtoMapper, StudentDtoMapper studentDtoMapper) {
 		this.studentService = studentService;
 		this.subjectService = subjectService;
 		this.subjectDtoMapper = subjectDtoMapper;
+		this.studentDtoMapper = studentDtoMapper;
 	}
 
 	@GetMapping
@@ -86,4 +91,47 @@ public class SubjectController {
 	public void delete(@PathVariable Long id) {
 		subjectService.delete(id);
 	}
+
+	@GetMapping("/{id}/grades")
+	public Map<Long, GradesDto> getGrades(@PathVariable Long id) {
+		Optional<Subject> subject = subjectService.getSubject(id);
+		if (!subject.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subject not found");
+		}
+
+		Map<Long, GradesDto> result = new HashMap<>();
+		for (Student student : subject.get().getStudents()) {
+			GradesDto gradesDto = new GradesDto();
+			gradesDto.setOriginalGrade(student.getOriginalGrade(subject.get()));
+			gradesDto.setAdjustedGrade(student.getAdjustedGrade(subject.get()));
+
+			result.put(student.getId(), gradesDto);
+		}
+
+		return result;
+	}
+
+	@PostMapping("/{id}/adjust-grades")
+	public Map<Long, GradesDto> adjustGrades(@PathVariable Long id, @RequestParam Double adjustmentFactor) {
+		Optional<Subject> subject = subjectService.getSubject(id);
+		if (!subject.isPresent()) {
+			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subject not found");
+		}
+
+		for (Student student : subject.get().getStudents()) {
+			student.setAdjustedGrade(subjectService.adjustGrade(student.getOriginalGrade(subject.get()), adjustmentFactor), subject.get());
+			studentService.save(student);
+		}
+
+		Map<Long, GradesDto> result = new HashMap<>();
+		for (Student student : subject.get().getStudents()) {
+			GradesDto gradesDto = new GradesDto();
+			gradesDto.setOriginalGrade(student.getOriginalGrade(subject.get()));
+			gradesDto.setAdjustedGrade(student.getAdjustedGrade(subject.get()));
+
+			result.put(student.getId(), gradesDto);
+		}
+
+		return result;
+	}
 }
diff --git a/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectDtoMapper.java b/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectDtoMapper.java
index a3a7f7b..0ec55f3 100644
--- a/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectDtoMapper.java
+++ b/src/main/java/com/ultimatesoftware/school/rest/subject/SubjectDtoMapper.java
@@ -14,6 +14,6 @@ public class SubjectDtoMapper {
 	}
 
 	public void mapToDomain(SubjectDto dto, Subject domain) {
-		 domain.setName(dto.getName());
+		domain.setName(dto.getName());
 	}
 }
diff --git a/src/test/java/com/ultimatesoftware/school/rest/person/StudentControllerTests.java b/src/test/java/com/ultimatesoftware/school/rest/person/StudentControllerTests.java
index 92f7c3e..10986f6 100644
--- a/src/test/java/com/ultimatesoftware/school/rest/person/StudentControllerTests.java
+++ b/src/test/java/com/ultimatesoftware/school/rest/person/StudentControllerTests.java
@@ -1,12 +1,19 @@
 package com.ultimatesoftware.school.rest.person;
 
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.doNothing;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+import java.util.Collections;
+import java.util.Optional;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -20,6 +27,7 @@ import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.ultimatesoftware.school.domain.person.Student;
 import com.ultimatesoftware.school.domain.person.StudentService;
+import com.ultimatesoftware.school.domain.subject.Subject;
 import com.ultimatesoftware.school.domain.subject.SubjectService;
 import com.ultimatesoftware.school.rest.subject.SubjectDtoMapper;
 
@@ -43,6 +51,20 @@ public class StudentControllerTests {
 
 	private ObjectMapper objectMapper = new ObjectMapper();
 
+	private Student testStudent;
+	private Subject testSubject;
+
+	@Before
+	public void setUp() throws Exception {
+		testSubject = mock(Subject.class);
+		testSubject.setName("sName");
+
+		testStudent = mock(Student.class);
+		testStudent.setFirstName("fName");
+		testStudent.setLastName("lName");
+		testStudent.setSubjects(Collections.singleton(testSubject));
+	}
+
 	@Test
 	public void getAllShouldReturnEmptyList() throws Exception {
 		mockMvc.perform(get("/v1/students"))
@@ -76,4 +98,43 @@ public class StudentControllerTests {
 				.andExpect(status().isOk());
 	}
 
+	@Test
+	public void getOriginalGrade() throws Exception {
+		when(subjectService.getSubject(anyLong())).thenReturn(Optional.of(testSubject));
+		when(studentService.getStudent(anyLong())).thenReturn(Optional.of(testStudent));
+
+		when(testStudent.getOriginalGrade(any())).thenReturn(100.0);
+
+		mockMvc.perform(get("/v1/students/12345/getOriginalGrade").param("subjectId", "6789"))
+				.andExpect(status().isOk())
+				.andExpect(content().string("100.0"));
+	}
+
+	@Test
+	public void getAdjustedGrade() throws Exception {
+		when(subjectService.getSubject(anyLong())).thenReturn(Optional.of(testSubject));
+		when(studentService.getStudent(anyLong())).thenReturn(Optional.of(testStudent));
+
+		when(testStudent.getAdjustedGrade(any())).thenReturn(75.0);
+
+		mockMvc.perform(get("/v1/students/12345/getAdjustedGrade").param("subjectId", "6789"))
+				.andExpect(status().isOk())
+				.andExpect(content().string("75.0"));
+	}
+
+	@Test
+	public void setOriginalGrade() throws Exception {
+		when(studentService.getStudent(anyLong())).thenReturn(Optional.of(testStudent));
+		when(subjectService.getSubject(anyLong())).thenReturn(Optional.of(testSubject));
+		doNothing().when(testStudent).setOriginalGrade(90.0, testSubject);
+
+		SetGradeDto setGradeDto = new SetGradeDto();
+		setGradeDto.setSubjectId(5678L);
+		setGradeDto.setGrade(90.0);
+
+		mockMvc.perform(put("/v1/students/1234/setOriginalGrade")
+				.contentType(MediaType.APPLICATION_JSON)
+				.content(objectMapper.writeValueAsString(setGradeDto)))
+				.andExpect(status().isOk());
+	}
 }
diff --git a/src/test/java/com/ultimatesoftware/school/rest/subject/SubjectControllerTests.java b/src/test/java/com/ultimatesoftware/school/rest/subject/SubjectControllerTests.java
index 0e00dfe..4db7310 100644
--- a/src/test/java/com/ultimatesoftware/school/rest/subject/SubjectControllerTests.java
+++ b/src/test/java/com/ultimatesoftware/school/rest/subject/SubjectControllerTests.java
@@ -1,12 +1,17 @@
 package com.ultimatesoftware.school.rest.subject;
 
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+import java.util.Collections;
+import java.util.Optional;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,15 +23,18 @@ import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.ultimatesoftware.school.domain.subject.SubjectService;
+import com.ultimatesoftware.school.domain.person.Student;
 import com.ultimatesoftware.school.domain.person.StudentService;
 import com.ultimatesoftware.school.domain.subject.Subject;
+import com.ultimatesoftware.school.domain.subject.SubjectService;
+import com.ultimatesoftware.school.rest.person.StudentDtoMapper;
 
 @RunWith(SpringRunner.class)
 @WebMvcTest(SubjectController.class)
 @EnableWebMvc
 @Import({
-		SubjectDtoMapper.class
+		SubjectDtoMapper.class,
+		StudentDtoMapper.class
 })
 public class SubjectControllerTests {
 
@@ -41,6 +49,20 @@ public class SubjectControllerTests {
 
 	private ObjectMapper objectMapper = new ObjectMapper();
 
+	private Student testStudent;
+	private Subject testSubject;
+
+	@Before
+	public void setUp() throws Exception {
+		testSubject = mock(Subject.class);
+		testSubject.setName("sName");
+
+		testStudent = mock(Student.class);
+		testStudent.setFirstName("fName");
+		testStudent.setLastName("lName");
+		testStudent.setSubjects(Collections.singleton(testSubject));
+	}
+
 	@Test
 	public void getAllShouldReturnEmptyList() throws Exception {
 		mockMvc.perform(get("/v1/subjects"))
@@ -73,4 +95,19 @@ public class SubjectControllerTests {
 				.andExpect(status().isOk());
 	}
 
+	@Test
+	public void getGrades() throws Exception {
+		when(studentService.getStudent(anyLong())).thenReturn(Optional.of(testStudent));
+		when(subjectService.getSubject(anyLong())).thenReturn(Optional.of(testSubject));
+		when(testSubject.getStudents()).thenReturn(Collections.singleton(testStudent));
+		when(testStudent.getOriginalGrade(any())).thenReturn(60.0);
+		when(testStudent.getAdjustedGrade(any())).thenReturn(75.0);
+		when(testStudent.getId()).thenReturn(1L);
+
+
+		mockMvc.perform(get("/v1/subjects/1234/grades"))
+				.andExpect(status().isOk())
+				.andExpect(content().json("{'1':{'originalGrade':60.0,'adjustedGrade':75.0}}"));
+	}
+
 }
-- 
2.23.0.windows.1

